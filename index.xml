<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ICE JAM on ICE JAM</title>
    <link>https://orrrz.github.io/</link>
    <description>Recent content in ICE JAM on ICE JAM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Mar 2019 10:48:50 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Git Memo</title>
      <link>https://orrrz.github.io/posts/git-memo/</link>
      <pubDate>Wed, 20 Mar 2019 10:48:50 +0800</pubDate>
      
      <guid>https://orrrz.github.io/posts/git-memo/</guid>
      <description>

&lt;h4 id=&#34;hugo&#34;&gt;HUGO&lt;/h4&gt;

&lt;p&gt;Add some content&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new posts/xxx.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start the Hugo Server&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 重新生成静态blog
# -t 主题
hugo -t=hyde -D    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上传到orrrz.github.io&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;cd public

git init git add .

git commit -m &#39;xxx&#39;

git remote add origin git@github.com:username/username.github.io.git

git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;一键部署&#34;&gt;一键部署&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# 在根目录新建 deploy.sh ，复制以下代码并保存
#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
then msg=&amp;quot;$1&amp;quot;
fi

# 修改为自己的theme
hugo -t=theme -D

cd public
git add -A
git commit -m &amp;quot;$msg&amp;quot;
git push --force -u origin master

cd ../
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果是linux系统还需要给脚本添加可执行权限&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod +x deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h4 id=&#34;创建git-仓库&#34;&gt;创建git 仓库&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;mkdir xxx
cd xxx
git init

Initialized empty Git repository in /home/xxx/.git/
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;添加一些文件并提交&#34;&gt;添加一些文件并提交&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;touch readme.md
git add readme.md
git commit -m &#39;for test&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;从远程克隆仓库&#34;&gt;从远程克隆仓库&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# SSH协议/HTTPS协议地址
git clone SSH/HTTPS
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查看分支&#34;&gt;查看分支&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;git branch
# 查看本地和远程的分支情况
git branch -a
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;创建分支&#34;&gt;创建分支&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;git branch xxx
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;切换分支&#34;&gt;切换分支&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# 从当前branch切换到 xxx
git checkout xxx
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;创建同时切换分支&#34;&gt;创建同时切换分支&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# 在当前分支上创建分支 dev，并切换到 dev
git checkout -b dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;删除分支&#34;&gt;删除分支&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# 不能在要删除的分支上操作
git branch -d dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;将本地分支推送到远程分支&#34;&gt;将本地分支推送到远程分支&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# 提交本地的 dev 分支到远程仓库 origin 的 dev 分支
git push origin dev:dev
# 提交本地的 dev 分支到远程仓库 origin 的 remotedev 分支
git push orgin dev:remotedev
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;删除远程分支&#34;&gt;删除远程分支&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# 删除远程仓库的 remotetest 分支，本地的不收影响
git push origin :remotedev
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;拉取远程分支&#34;&gt;拉取远程分支&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;git pull &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;
# 比如 将远程 origin 仓库 testpull 分支拉取下来
git pull origin testpull
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;本地分支与远程分支关联&#34;&gt;本地分支与远程分支关联&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;git branch --set-upstream-to=origin/&amp;lt;branch&amp;gt; dev
# 本地的 dev 分支和远程的 origin/dev 分支关联后，可以直接使用 git pull
git branch --set-upstream-to=origin/dev dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;合并分支&#34;&gt;合并分支&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# 将test合并到当前分支上
git merge test
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;git-checkout-远程分支&#34;&gt;git checkout 远程分支&lt;/h4&gt;

&lt;p&gt;有时候在远程仓库的基础上，拉取特定的某一个分支&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# localdev 是本地分支， origin/dev 是远程的 dev 分支
git checkout -b localdev origin/dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;git-fetch&#34;&gt;git fetch&lt;/h4&gt;

&lt;p&gt;git fetch 和 git pull 很像，但 git fetch 要柔和一点，git pull 会将远程的命令拉下来直接和本地的合并。git fetch 会先获取信息，但不合并。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git fetch origin dev
# 比较本地版本和远程版本
git log -p dev origin/dev
# 合并远程 dev 版本
git merge origin/dev
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Some Sentences</title>
      <link>https://orrrz.github.io/posts/some-sentences/</link>
      <pubDate>Thu, 07 Mar 2019 11:38:10 +0800</pubDate>
      
      <guid>https://orrrz.github.io/posts/some-sentences/</guid>
      <description>&lt;p&gt;‘I wish you all enough courage to be yourselves without need for approval or permission from anyone&amp;hellip;’&lt;/p&gt;

&lt;p&gt;‘I wish you enough humility to stop thinking you are better than anyone&amp;hellip; ‘&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>