<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ICE JAM</title>
    <link>https://orrrz.github.io/</link>
    <description>Recent content on ICE JAM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Apr 2019 02:18:18 +0800</lastBuildDate>
    
	<atom:link href="https://orrrz.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SpringMVC异常处理</title>
      <link>https://orrrz.github.io/posts/springmvc%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Fri, 05 Apr 2019 02:18:18 +0800</pubDate>
      
      <guid>https://orrrz.github.io/posts/springmvc%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>写完 springboot_crud_restful 这个 demo 后，进一步了解到 SpringMVC 对于统一异常处理的方法。
在这里我只写常用的两种：
1）实现HandlerExceptionResolver接口
2）使用@ControllerAdvice + @ExceptionHandler 注解
实现HandlerExceptionResolver接口 Spring MVC 提供了异常解析器 HandlerExceptionResolver 接口，将处理器( handler )执行时发生的异常，解析( 转换 )成对应的 ModelAndView 结果。源码如下：
// HandlerExceptionResolver.java public interface HandlerExceptionResolver { // 解析异常，转换成对应的 ModelAndView 结果 @Nullable ModelAndView resolveException( HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex); }  SpringMVC 处理请求出现异常时，会找到容器中HandlerExceptionResolver类型的对象，即实现 HandlerExceptionResolver 的类。换句话说，HandlerExceptionResolver可以实现全局的异常控制，所有的 controller 发生的异常都会进入其实现类，需要做通用处理。
自定义异常处理类，实现接口 HandlerExceptionResolver，需要确保此类被扫描并装在到 Spring 容器，代码如下：
@Component public class CustomerExceptionResolver implements HandlerExceptionResolver { @Override public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) { //1.</description>
    </item>
    
    <item>
      <title>Extract ZookeeperAddr From RegisterAddr</title>
      <link>https://orrrz.github.io/posts/extract-zookeeperaddr-from-registeraddr/</link>
      <pubDate>Sat, 30 Mar 2019 21:32:02 +0800</pubDate>
      
      <guid>https://orrrz.github.io/posts/extract-zookeeperaddr-from-registeraddr/</guid>
      <description>从 Dubbo.zookeeper 注册地址提取 zookeeper 地址
import java.util.Optional; public class ZookeeperURL { public static final String PREFIX = &amp;quot;zookeeper://&amp;quot;; public static final String BACKUP = &amp;quot;backup=&amp;quot;; public static Optional&amp;lt;String&amp;gt; convertDubboRegistryToZookeeperURL(String dubboRegistry){ StringBuilder zookeeperURL = new StringBuilder(); if(dubboRegistry != null &amp;amp;&amp;amp; dubboRegistry.startsWith(PREFIX)){ dubboRegistry = dubboRegistry.substring(PREFIX.length()); int index = dubboRegistry.indexOf(&amp;quot;?&amp;quot;); if(index &amp;gt; 0){ zookeeperURL.append(dubboRegistry.substring(0, index)); dubboRegistry = dubboRegistry.substring(index + 1); String[] dubboRegistries = dubboRegistry.split(&amp;quot;&amp;amp;&amp;quot;); for (int i = 0; i &amp;lt; dubboRegistries.length; i++) { if(dubboRegistries[i].</description>
    </item>
    
    <item>
      <title>RESTful API</title>
      <link>https://orrrz.github.io/posts/restful-api/</link>
      <pubDate>Wed, 27 Mar 2019 19:55:23 +0800</pubDate>
      
      <guid>https://orrrz.github.io/posts/restful-api/</guid>
      <description>一、概述： RESTful：符合REST架构风格的网络API接口。
REST：Representational State Transfer 表现层状态转移，是一种架构约束规范和原则。
 REST本身并没有创造新的技术、组件或服务，而隐藏在RESTful背后的理念就是使用Web的现有特征和能力， 更好地使用现有Web标准中的一些准则和约束。虽然REST本身受Web技术的影响很深， 但是理论上REST架构风格并不是绑定在HTTP上，只不过目前HTTP是唯一与REST相关的实例。 所以我们这里描述的REST也是通过HTTP实现的REST。
 二、起源 REST这个词，是Roy Thomas Fielding在他2000年的博士论文中提出的。
RESTful架构的本意是在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。（My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. ）
三、Richardson Maturity Model（理查德森模型） http://martinfowler.com/articles/richardsonMaturityModel.html
1）Level0（The Swamp of POX）
不算REST的一部分。
根据交换的XML内容操作所有的资源，类似SOAP（SOAP 是基于 XML 的简易协议，可使应用程序在 HTTP 之上进行信息交换）。
2）Level 1 Resources</description>
    </item>
    
    <item>
      <title>LeetCode</title>
      <link>https://orrrz.github.io/posts/leetcode/</link>
      <pubDate>Wed, 20 Mar 2019 22:27:15 +0800</pubDate>
      
      <guid>https://orrrz.github.io/posts/leetcode/</guid>
      <description>LeetCode 解题记录 迁移至Leetcode-algorithm-solution</description>
    </item>
    
    <item>
      <title>Git Memo</title>
      <link>https://orrrz.github.io/posts/git-memo/</link>
      <pubDate>Wed, 20 Mar 2019 10:48:50 +0800</pubDate>
      
      <guid>https://orrrz.github.io/posts/git-memo/</guid>
      <description>HUGO Add some content
hugo new posts/xxx.md  Start the Hugo Server
# 启动本地服务器 hugo server -t=we -D # 访问地址 127.0.0.1：1313 # 重新生成静态blog，t=theme hugo -t=hyde -D  部署到orrrz.github.io
cd public git init git add . git commit -m &#39;xxx&#39; git remote add origin git@github.com:username/username.github.io.git git push -u origin master # --force  一键部署 # 在根目录新建 deploy.sh ，复制以下代码并保存 #!/bin/bash echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot; msg=&amp;quot;rebuilding site `date`&amp;quot; if [ $# -eq 1 ] then msg=&amp;quot;$1&amp;quot; fi # 修改为自己的theme hugo -t=theme -D cd public git add -A git commit -m &amp;quot;$msg&amp;quot; git push --force -u origin master cd .</description>
    </item>
    
    <item>
      <title>General Resolves</title>
      <link>https://orrrz.github.io/posts/general-resolves/</link>
      <pubDate>Thu, 07 Mar 2019 11:38:10 +0800</pubDate>
      
      <guid>https://orrrz.github.io/posts/general-resolves/</guid>
      <description> Be better to family Less empty talk Dedicated to study No more stare at screen in the dark Aggressive and peseverance like mosquitoes&amp;hellip;
 ‘I wish you all enough courage to be yourselves without need for approval or permission from anyone&amp;hellip;’
 ‘I wish you enough humility to stop thinking you are better than anyone&amp;hellip; ‘
  </description>
    </item>
    
  </channel>
</rss>